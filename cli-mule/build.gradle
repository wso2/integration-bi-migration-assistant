plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.1.3'
}

group 'com.wso2'
version '0.1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
    }
    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    // mule
    implementation project(path: ':mule')

    // Dev dependencies
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}"
    implementation group: 'info.picocli', name: 'picocli', version: "${picocliVersion}"
    implementation group: 'org.jetbrains', name: 'annotations', version: "${jetbrainsAnnotationsVersion}"
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
    spotbugs group: 'com.github.spotbugs', name: 'spotbugs', version: "${spotbugsVersion}"
}

checkstyle {
    toolVersion = '10.12.5'
    config = resources.text.fromUri('https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml')
}

checkstyleMain
        .exclude("mule/dataweave/parser/*.java")

spotbugs {
    reportLevel = 'high'
    excludeFilter = file("${rootProject.projectDir}/spotbugs-exclude.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports {
        html.required = true
        xml.required = false
    }
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

// Keep this for backward compatibility
application {
    mainClassName = 'cli.Main'
}

// Default jar task - we'll keep it for backward compatibility
jar {
    manifest {
        attributes(
                'Main-Class': 'cli.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = 'integration-bi-migration-assistant.jar'
}

// Create a separate JAR for Mule migrations
task muleJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': 'cli.MuleCli'
        )
    }
    from {
        sourceSets.main.output
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName = 'mule-migration-assistant'
    archiveVersion = project.version
}

task mulePack(type: Exec, dependsOn: muleJar) {
    workingDir "${projectDir}/src/main/java/baltool/mule/tool-bi-migrate-mule"
    commandLine 'bal', 'pack'
    group = 'build'
}

task muleRelease(type: Exec, dependsOn: mulePack) {
    workingDir "${projectDir}/src/main/java/baltool/mule/tool-bi-migrate-mule"
    commandLine 'bal', 'push'
    group = 'build'
}

build {
    dependsOn ":mule:build"
    dependsOn checkstyleMain
    dependsOn spotbugsMain
    dependsOn muleJar
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
